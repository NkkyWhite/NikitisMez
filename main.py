import numpy as np

# системы скольжения
k = 24
Bvector = np.array([[1 / (2 ** 0.5), 0, -1 / (2 ** 0.5)],[0, 1 / (2 ** 0.5), -1 / (2 ** 0.5)],[1 / (2 ** 0.5), -1 / (2 ** 0.5), 0],[1 / (2 ** 0.5), 1 / (2 ** 0.5), 0],[1 / (2 ** 0.5), 0, 1 / (2 ** 0.5)],[0, 1 / (2 ** 0.5), -1 / (2 ** 0.5)],[1 / (2 ** 0.5), 1 / (2 ** 0.5), 0],[0, 1 / (2 ** 0.5), 1 / (2 ** 0.5)],[0, 1 / (2 ** 0.5), -1 / (2 ** 0.5)],[1 / (2 ** 0.5), 0, 1 / (2 ** 0.5)],[1 / (2 ** 0.5), -1 / (2 ** 0.5), 0],[0, 1 / (2 ** 0.5), 1 / (2 ** 0.5)],[-1 / (2 ** 0.5), 0, 1 / (2 ** 0.5)],[0, -1 / (2 ** 0.5), 1 / (2 ** 0.5)],[-1 / (2 ** 0.5), 1 / (2 ** 0.5), 0],[-1 / (2 ** 0.5), -1 / (2 ** 0.5), 0],[-1 / (2 ** 0.5), 0, -1 / (2 ** 0.5)],[0, -1 / (2 ** 0.5), 1 / (2 ** 0.5)],[-1 / (2 ** 0.5), -1 / (2 ** 0.5), 0],[0, -1 / (2 ** 0.5), -1 / (2 ** 0.5)],[-1 / (2 ** 0.5), 0, 1 / (2 ** 0.5)],[-1 / (2 ** 0.5), 0, -1 / (2 ** 0.5)],[-1 / (2 ** 0.5), 1 / (2 ** 0.5), 0],[0, -1 / (2 ** 0.5), -1 / (2 ** 0.5)]])
Nvector = np.array([[1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[-1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[-1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[-1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), -1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), -1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), -1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), -1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), -1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), -1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[-1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[-1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[-1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), -1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), -1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), -1 / (3 ** 0.5), 1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), -1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), -1 / (3 ** 0.5)],[1 / (3 ** 0.5), 1 / (3 ** 0.5), -1 / (3 ** 0.5)]])
#Bvector = np.array([1 / (2 ** 0.5), 0, -1 / (2 ** 0.5)])
#Nvector = np.array([1 / (3 ** 0.5), 1 / (3 ** 0.5), 1 / (3 ** 0.5)])

# Матрицы 3*3
Naprag0 = np.zeros((2, 3))
SigmaP = np.zeros((2, 3))
Sigm = np.zeros((3,3))

# Nach
GradSkorosti = np.zeros(k)
T = np.zeros(k + 1)

Tkrit = 17.5
YskorostSdviga0 = 0.00001
deltT = 1
m = 86
t = 4
Emax = 15
E12 = 0.001
E21 = -0.0005
E = np.array([[0, E12, 0], [E21, 0, 0], [0, 0, 0]])
# UprugSvoistvTenzor = np.array( [[P1111, P1122, P3311, 0, 0, 0], [P1122, P2222, P2233, 0, 0, 0], [P3311, P3322,
# P3333, 0, 0, 0], [0, 0, 0, P1212, 0, 0], [0, 0, 0, 0, P1313, 0], [0, 0, 0, 0, 0, P2323]])

# print(UprugSvoistvTenzor)
# print(E)

# Tk = np.inner(Naprag0, np.dot(Nvector, Bvector))


# Тензор упругих свойств
P = np.zeros((3, 3, 3, 3))
# print(P.ndim)
P[0, 0, 0, 0] = P[1, 1, 1, 1] = P[2, 2, 2, 2] = 168.4
P[0, 0, 1, 1] = P[1, 1, 0, 0] = P[2, 2, 0, 0] = P[0, 0, 2, 2] = P[1, 1, 2, 2] = P[2, 2, 1, 1] = 121.4
P[0, 1, 0, 1] = P[1, 0, 0, 1] = P[1, 0, 1, 0] = P[0, 1, 1, 0] = P[0, 2, 0, 2] = P[2, 0, 0, 2] = P[2, 0, 2, 0] = P[0, 2, 2, 0] = P[2, 1, 2, 1] = P[2, 1, 1, 2] = P[1, 2, 1, 2] = P[1, 2, 2, 1] = 75.4

# print("Элемент P1111 = ", P[0, 0, 0, 0])
# print("Элемент P2111 = ", P[1, 0, 0, 0])
# print(P)
EP = 0
# print("Элемент P1111 = ", P[0, 0, 0, 0])
# print("Элемент P2111 = ", P[1, 0, 0, 0])
# print(P)
deltE = E
ASigm = []
BEp = []
for deltT in range(1, t+100):
    SigmaP = np.tensordot(P, deltE, axes=2)
    Sigm = Sigm + SigmaP
    BEp.append(Sigm)
    for p in range(1, k):
        T[p] = np.tensordot(np.tensordot(Bvector[p],Nvector[p], axes=0),Sigm)
        if Tkrit >= T[p]:
            GradSkorosti = 0
        if Tkrit < T[p]:
            GradSkorosti = YskorostSdviga0 * ((T / Tkrit) ** (1 / m))
        EP += GradSkorosti*np.tensordot(Bvector[p],Nvector[p],axes=0)

    ASigm.append(EP)
    deltE = E-EP

    #SigmaP = np.tensordot(P, deltE, axes=2)
    #print(Sigm)
print(Sigm)



